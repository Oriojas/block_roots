// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class pushData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save pushData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type pushData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("pushData", id.toString(), this);
    }
  }

  static load(id: string): pushData | null {
    return changetype<pushData | null>(store.get("pushData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get businessName(): string {
    let value = this.get("businessName");
    return value!.toString();
  }

  set businessName(value: string) {
    this.set("businessName", Value.fromString(value));
  }

  get product(): string {
    let value = this.get("product");
    return value!.toString();
  }

  set product(value: string) {
    this.set("product", Value.fromString(value));
  }

  get batch(): string {
    let value = this.get("batch");
    return value!.toString();
  }

  set batch(value: string) {
    this.set("batch", Value.fromString(value));
  }

  get packing(): string {
    let value = this.get("packing");
    return value!.toString();
  }

  set packing(value: string) {
    this.set("packing", Value.fromString(value));
  }
}
